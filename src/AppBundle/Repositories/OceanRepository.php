<?php

namespace AppBundle\Repositories;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query\Expr;
/**
 * OceanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 */
class OceanRepository extends EntityRepository
{
    /**
     * Get all the users for the datatable rendering
     * @param array $get
     * @param bool $flag
     * @return array|Query
     */
    public function ajaxTable(array $get, $flag = false){
        /* Indexed column (used for fast and accurate table cardinality) */
        $alias = 'u';
        /* DB table to use */
        $tableObjectName = 'AppBundle:Ocean';
        
        /**
         * Set to default
         */
//        if(!isset($get['columns']) || empty($get['columns']))
//            $get['columns'] = array('id');
        $aColumns = array();
        foreach($get['columns'] as $value) $aColumns[] = $alias .'.'. $value;
        $cb = $this->getEntityManager()
            ->getRepository($tableObjectName)
            ->createQueryBuilder($alias)
            ->select(str_replace(" , ", " ", implode(", ", $aColumns)));
//        if ( isset( $get['iDisplayStart'] ) && $get['iDisplayLength'] != '-1' ){
//            $cb->setFirstResult( (int)$get['iDisplayStart'] )
//                ->setMaxResults( (int)$get['iDisplayLength'] );
//        }
//        /*
//         * Ordering
//         */
//        if ( isset( $get['iSortCol_0'] ) ){
//            for ( $i=0 ; $i<intval( $get['iSortingCols'] ) ; $i++ ){
//                if ( $get[ 'bSortable_'.intval($get['iSortCol_'.$i]) ] == "true" ){
//                    $cb->orderBy($aColumns[ (int)$get['iSortCol_'.$i] ], $get['sSortDir_'.$i]);
//                }
//            }
//        }
//        /*
//           * Filtering
//           * NOTE this does not match the built-in DataTables filtering which does it
//           * word by word on any field. It's possible to do here, but concerned about efficiency
//           * on very large tables, and MySQL's regex functionality is very limited
//           */
//        if ( isset($get['sSearch']) && $get['sSearch'] != '' ){
//            $aLike = array();
//            for ( $i=0 ; $i<count($aColumns) ; $i++ ){
//                if ( isset($get['bSearchable_'.$i]) && $get['bSearchable_'.$i] == "true" ){
//                    $aLike[] = $cb->expr()->like($aColumns[$i], '\'%'. $get['sSearch'] .'%\'');
//                }
//            }
//            if(count($aLike) > 0) $cb->andWhere(new Expr\Orx($aLike));
//            else unset($aLike);
//        }
        /*
         * SQL queries
         * Get data to display
         */
        $query = $cb->getQuery();
        if($flag)
            return $query;
        else
            return $query->getResult();
    }
    /**
     * @return int
     */
    public function getCount(){
        $aResultTotal = $this->getEntityManager()
            ->createQuery('SELECT COUNT(a) FROM AppBundle:Ocean a')
            ->setMaxResults(1)
            ->getResult();
        return $aResultTotal[0][1];
    }
}
